"use strict";(self.webpackChunkwebsite_new=self.webpackChunkwebsite_new||[]).push([[815],{2288:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>r,contentTitle:()=>i,default:()=>l,frontMatter:()=>c,metadata:()=>s,toc:()=>u});const s=JSON.parse('{"id":"usage-with-kafkajs","title":"Usage with KafkaJS","description":"Although Confluent Schema Registry can be used with any Kafka client, or outside","source":"@site/../docs/usage-with-kafkajs.md","sourceDirName":".","slug":"/usage-with-kafkajs","permalink":"/confluent-schema-registry/docs/usage-with-kafkajs","draft":false,"unlisted":false,"editUrl":"https://github.com/kafkajs/confluent-schema-registry/edit/master/s/../docs/usage-with-kafkajs.md","tags":[],"version":"current","frontMatter":{"id":"usage-with-kafkajs","title":"Usage with KafkaJS","sidebar_label":"Usage with KafkaJS"},"sidebar":"docs","previous":{"title":"Custom Types","permalink":"/confluent-schema-registry/docs/custom-types"},"next":{"title":"Example Avro Schemas","permalink":"/confluent-schema-registry/docs/schemas"}}');var a=t(4848),o=t(8453);const c={id:"usage-with-kafkajs",title:"Usage with KafkaJS",sidebar_label:"Usage with KafkaJS"},i=void 0,r={},u=[];function d(e){const n={a:"a",code:"code",p:"p",pre:"pre",...(0,o.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsxs)(n.p,{children:["Although Confluent Schema Registry can be used with any Kafka client, or outside\nof Kafka entirely, it is commonly used together with ",(0,a.jsx)(n.a,{href:"https://kafka.js.org",children:"KafkaJS"}),"."]}),"\n",(0,a.jsx)(n.p,{children:"The following is an example of an application that consumes from a topic of\nAVRO encoded messages and produces to another topic after encoding the messages\nwith a different schema."}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-js",children:"const path = require('path')\nconst { Kafka } = require('kafkajs')\nconst { SchemaRegistry, SchemaType, avdlToAVSCAsync } = require('@kafkajs/confluent-schema-registry')\n\nconst registry = new SchemaRegistry({ host: 'http://localhost:8081' })\nconst kafka = new Kafka({\n  brokers: ['localhost:9092'],\n  clientId: 'example-consumer',\n})\nconst consumer = kafka.consumer({ groupId: 'test-group' })\nconst producer = kafka.producer()\n\nconst incomingTopic = 'incoming'\nconst outgoingTopic = 'outgoing'\n\nconst run = async () => {\n  const schema = await avdlToAVSCAsync(path.join(__dirname, 'schema.avdl'))\n  const { id } = await registry.register({ type: SchemaType.AVRO, schema: JSON.stringify(schema) })\n\n  await consumer.connect()\n  await producer.connect()\n\n  await consumer.subscribe({ topic: incomingTopic })\n\n  await consumer.run({\n    eachMessage: async ({ topic, partition, message }) => {\n      const decodedMessage = {\n        ...message,\n        value: await registry.decode(message.value)\n      }\n\n      const outgoingMessage = {\n        key: message.key,\n        value: await registry.encode(id, decodedMessage.value)\n      }\n\n      await producer.send({\n        topic: outgoingTopic,\n        messages: [ outgoingMessage ]\n      })\n    },\n  })\n}\n\nrun().catch(async e => {\n  console.error(e)\n  consumer && await consumer.disconnect()\n  producer && await producer.disconnect()\n  process.exit(1)\n})\n"})}),"\n",(0,a.jsx)(n.p,{children:"Note that this example is only intended as a simple visualization of how\nto use Confluent Schema Registry together with KafkaJS. It is not necessarily\nintended to be a production-ready application."})]})}function l(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(d,{...e})}):d(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>c,x:()=>i});var s=t(6540);const a={},o=s.createContext(a);function c(e){const n=s.useContext(o);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function i(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:c(e.components),s.createElement(o.Provider,{value:n},e.children)}}}]);
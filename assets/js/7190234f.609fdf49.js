"use strict";(self.webpackChunkwebsite_new=self.webpackChunkwebsite_new||[]).push([[363],{9185:(e,t,s)=>{s.r(t),s.d(t,{assets:()=>c,contentTitle:()=>i,default:()=>d,frontMatter:()=>r,metadata:()=>n,toc:()=>l});const n=JSON.parse('{"id":"custom-types","title":"Configuring Custom Types","description":"Schemas can contain types that cannot be represented by Javascript primitive types, or","source":"@site/../docs/custom-types.md","sourceDirName":".","slug":"/custom-types","permalink":"/confluent-schema-registry/docs/custom-types","draft":false,"unlisted":false,"editUrl":"https://github.com/kafkajs/confluent-schema-registry/edit/master/s/../docs/custom-types.md","tags":[],"version":"current","frontMatter":{"id":"custom-types","title":"Configuring Custom Types","sidebar_label":"Custom Types"},"sidebar":"docs","previous":{"title":"Advanced Usage","permalink":"/confluent-schema-registry/docs/advanced-usage"},"next":{"title":"Usage with KafkaJS","permalink":"/confluent-schema-registry/docs/usage-with-kafkajs"}}');var o=s(4848),a=s(8453);const r={id:"custom-types",title:"Configuring Custom Types",sidebar_label:"Custom Types"},i=void 0,c={},l=[{value:"Avro",id:"avro",level:2},{value:"Custom long type",id:"custom-long-type",level:3}];function p(e){const t={a:"a",code:"code",h2:"h2",h3:"h3",p:"p",pre:"pre",...(0,a.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsxs)(t.p,{children:["Schemas can contain types that cannot be represented by Javascript primitive types, or\nwhere there's more than one possible type to deserialize into. For example,\nthe Avro logical type ",(0,o.jsx)(t.code,{children:"timestamp-millis"})," represents a date, but is serialized as a ",(0,o.jsx)(t.code,{children:"long"}),".\nIn order to deserialize that into a ",(0,o.jsx)(t.code,{children:"Date"})," object, we need to configure the schema library."]}),"\n",(0,o.jsx)(t.h2,{id:"avro",children:"Avro"}),"\n",(0,o.jsxs)(t.p,{children:[(0,o.jsx)(t.code,{children:"@kafkajs/confluent-schema-registry"})," uses the ",(0,o.jsx)(t.a,{href:"https://github.com/mtth/avsc/wiki/Advanced-usage#logical-types",children:(0,o.jsx)(t.code,{children:"avsc"})}),"\nlibrary for Avro encoding/decoding. The ",(0,o.jsx)(t.a,{href:"/confluent-schema-registry/docs/usage#schema-type-options",children:"Schema Type Options"}),"\nfor Avro are passed to ",(0,o.jsx)(t.a,{href:"https://github.com/mtth/avsc/wiki/API#typeforschemaschema-opts",children:(0,o.jsx)(t.code,{children:"avsc.Type.forSchema"})}),",\nwhich allows us to set up a mapping between the logical type and the type we want to deserialize\ninto:"]}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-ts",children:"import { SchemaRegistry, SchemaType } from '@kafkajs/confluent-schema-registry'\nimport avro from 'avsc'\n\nclass DateType extends avro.types.LogicalType {\n  _fromValue(val: string) {\n    return new Date(val);\n  }\n  _toValue(date: Date): number {\n    return +date\n  }\n  _resolve(type: any) {\n    if (avro.Type.isType(type, 'long', 'string', 'logical:timestamp-millis')) {\n        return this._fromValue;\n    }\n  }\n}\n\n\nconst options = {\n  [SchemaType.AVRO]: {\n    logicalTypes: { 'timestamp-millis': DateType }\n  }\n}\nconst registry = new SchemaRegistry({ host: 'http://localhost:9092' }, options)\n"})}),"\n",(0,o.jsx)(t.h3,{id:"custom-long-type",children:"Custom long type"}),"\n",(0,o.jsxs)(t.p,{children:["JavaScript represents all numbers as doubles internally, which means that it is possible\nto lose precision when using very large numbers. In order to use a type that can\naccomodate such large numbers, you can use the same configuration option as above to\nhave avsc use for example ",(0,o.jsx)(t.code,{children:"BigInt"})," or ",(0,o.jsx)(t.code,{children:"longjs"})," instead of the native ",(0,o.jsx)(t.code,{children:"number"})," type."]}),"\n",(0,o.jsxs)(t.p,{children:["See ",(0,o.jsx)(t.a,{href:"https://github.com/mtth/avsc/wiki/Advanced-usage#custom-long-types",children:"Custom Long Types"}),"\nfor more details."]})]})}function d(e={}){const{wrapper:t}={...(0,a.R)(),...e.components};return t?(0,o.jsx)(t,{...e,children:(0,o.jsx)(p,{...e})}):p(e)}},8453:(e,t,s)=>{s.d(t,{R:()=>r,x:()=>i});var n=s(6540);const o={},a=n.createContext(o);function r(e){const t=n.useContext(a);return n.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function i(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:r(e.components),n.createElement(a.Provider,{value:t},e.children)}}}]);
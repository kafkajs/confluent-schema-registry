"use strict";(self.webpackChunkwebsite_new=self.webpackChunkwebsite_new||[]).push([[777],{1127:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>i,default:()=>h,frontMatter:()=>r,metadata:()=>s,toc:()=>d});const s=JSON.parse('{"id":"introduction","title":"Introduction","description":"confluent-schema-registry is a library that makes it easier to interact with the Confluent schema registry, it provides convenient methods to encode, decode and register new schemas using the Apache Avro, JSON Schema and Protobuf serialization formats and Confluent\'s wire format.","source":"@site/../docs/introduction.md","sourceDirName":".","slug":"/introduction","permalink":"/confluent-schema-registry/docs/introduction","draft":false,"unlisted":false,"editUrl":"https://github.com/kafkajs/confluent-schema-registry/edit/master/s/../docs/introduction.md","tags":[],"version":"current","frontMatter":{"id":"introduction","title":"Introduction","sidebar_label":"Introduction"},"sidebar":"docs","next":{"title":"Usage","permalink":"/confluent-schema-registry/docs/usage"}}');var a=n(4848),o=n(8453);const r={id:"introduction",title:"Introduction",sidebar_label:"Introduction"},i=void 0,c={},d=[{value:"Install",id:"install",level:2},{value:"Example",id:"example",level:2}];function l(e){const t={a:"a",code:"code",h2:"h2",p:"p",pre:"pre",...(0,o.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsxs)(t.p,{children:[(0,a.jsx)(t.code,{children:"confluent-schema-registry"})," is a library that makes it easier to interact with the Confluent schema registry, it provides convenient methods to encode, decode and register new schemas using the Apache Avro, JSON Schema and Protobuf serialization formats and Confluent's ",(0,a.jsx)(t.a,{href:"https://docs.confluent.io/current/schema-registry/docs/serializer-formatter.html#wire-format",children:"wire format"}),"."]}),"\n",(0,a.jsx)(t.h2,{id:"install",children:"Install"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-sh",children:"npm install @kafkajs/confluent-schema-registry\n# yarn add @kafkajs/confluent-schema-registry\n"})}),"\n",(0,a.jsx)(t.h2,{id:"example",children:"Example"}),"\n",(0,a.jsxs)(t.p,{children:["This example uses an AVRO schema. For more detailed explanations and examples of other schema types, ",(0,a.jsx)(t.a,{href:"/confluent-schema-registry/docs/usage",children:"see usage"}),"."]}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-js",children:'const path = require(\'path\')\nconst { SchemaRegistry, SchemaType } = require(\'@kafkajs/confluent-schema-registry\')\n\nconst registry = new SchemaRegistry({ host: \'http://localhost:8081\' })\n\n// Upload a schema to the registry\nconst schema = `\n  {\n    "type": "record",\n    "name": "RandomTest",\n    "namespace": "examples",\n    "fields": [{ "type": "string", "name": "fullName" }]\n  }\n`\nconst { id } = await registry.register({\n  type: SchemaType.AVRO,\n  schema,\n})\n\n// Encode using the uploaded schema\nconst payload = { fullName: \'John Doe\' }\nconst encodedPayload = await registry.encode(id, payload)\n\n// Decode the payload\nconst decodedPayload = await registry.decode(encodedPayload)\n'})})]})}function h(e={}){const{wrapper:t}={...(0,o.R)(),...e.components};return t?(0,a.jsx)(t,{...e,children:(0,a.jsx)(l,{...e})}):l(e)}},8453:(e,t,n)=>{n.d(t,{R:()=>r,x:()=>i});var s=n(6540);const a={},o=s.createContext(a);function r(e){const t=s.useContext(o);return s.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function i(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:r(e.components),s.createElement(o.Provider,{value:t},e.children)}}}]);